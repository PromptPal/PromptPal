// Code generated by mockery v2.42.0. DO NOT EDIT.

package service

import (
	context "context"

	ent "github.com/PromptPal/PromptPal/ent"
	mock "github.com/stretchr/testify/mock"
	openai "github.com/sashabaranov/go-openai"
	schema "github.com/PromptPal/PromptPal/ent/schema"
)

// MockBaseAIService is an autogenerated mock type for the BaseAIService type
type MockBaseAIService struct {
	mock.Mock
}

// Chat provides a mock function with given fields: ctx, project, prompts, variables, userId
func (_m *MockBaseAIService) Chat(ctx context.Context, project ent.Project, prompts []schema.PromptRow, variables map[string]string, userId string) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(ctx, project, prompts, variables, userId)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 openai.ChatCompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ent.Project, []schema.PromptRow, map[string]string, string) (openai.ChatCompletionResponse, error)); ok {
		return rf(ctx, project, prompts, variables, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ent.Project, []schema.PromptRow, map[string]string, string) openai.ChatCompletionResponse); ok {
		r0 = rf(ctx, project, prompts, variables, userId)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ent.Project, []schema.PromptRow, map[string]string, string) error); ok {
		r1 = rf(ctx, project, prompts, variables, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatStream provides a mock function with given fields: ctx, project, prompts, variables, userId
func (_m *MockBaseAIService) ChatStream(ctx context.Context, project ent.Project, prompts []schema.PromptRow, variables map[string]string, userId string) (*ChatStreamResponse, error) {
	ret := _m.Called(ctx, project, prompts, variables, userId)

	if len(ret) == 0 {
		panic("no return value specified for ChatStream")
	}

	var r0 *ChatStreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ent.Project, []schema.PromptRow, map[string]string, string) (*ChatStreamResponse, error)); ok {
		return rf(ctx, project, prompts, variables, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ent.Project, []schema.PromptRow, map[string]string, string) *ChatStreamResponse); ok {
		r0 = rf(ctx, project, prompts, variables, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChatStreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ent.Project, []schema.PromptRow, map[string]string, string) error); ok {
		r1 = rf(ctx, project, prompts, variables, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBaseAIService creates a new instance of MockBaseAIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBaseAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBaseAIService {
	mock := &MockBaseAIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}