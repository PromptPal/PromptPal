// Code generated by mockery v2.42.0. DO NOT EDIT.

package service

import (
	context "context"

	ent "github.com/PromptPal/PromptPal/ent"
	mock "github.com/stretchr/testify/mock"
)

// MockRBACService is an autogenerated mock type for the RBACService type
type MockRBACService struct {
	mock.Mock
}

// AssignUserToProject provides a mock function with given fields: ctx, userID, projectID, roleName
func (_m *MockRBACService) AssignUserToProject(ctx context.Context, userID int, projectID int, roleName string) error {
	ret := _m.Called(ctx, userID, projectID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for AssignUserToProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) error); ok {
		r0 = rf(ctx, userID, projectID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserProjectRoles provides a mock function with given fields: ctx, userID, projectID
func (_m *MockRBACService) GetUserProjectRoles(ctx context.Context, userID int, projectID int) ([]*ent.Role, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProjectRoles")
	}

	var r0 []*ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*ent.Role, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*ent.Role); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermission provides a mock function with given fields: ctx, userID, projectID, permissionName
func (_m *MockRBACService) HasPermission(ctx context.Context, userID int, projectID *int, permissionName string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID, permissionName)

	if len(ret) == 0 {
		panic("no return value specified for HasPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *int, string) (bool, error)); ok {
		return rf(ctx, userID, projectID, permissionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *int, string) bool); ok {
		r0 = rf(ctx, userID, projectID, permissionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *int, string) error); ok {
		r1 = rf(ctx, userID, projectID, permissionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeRBACData provides a mock function with given fields: ctx
func (_m *MockRBACService) InitializeRBACData(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitializeRBACData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsProjectOwner provides a mock function with given fields: ctx, userID, projectID
func (_m *MockRBACService) IsProjectOwner(ctx context.Context, userID int, projectID int) (bool, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for IsProjectOwner")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (bool, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) bool); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateExistingUsers provides a mock function with given fields: ctx
func (_m *MockRBACService) MigrateExistingUsers(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MigrateExistingUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserFromProject provides a mock function with given fields: ctx, userID, projectID, roleName
func (_m *MockRBACService) RemoveUserFromProject(ctx context.Context, userID int, projectID int, roleName string) error {
	ret := _m.Called(ctx, userID, projectID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) error); ok {
		r0 = rf(ctx, userID, projectID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRBACService creates a new instance of MockRBACService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRBACService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRBACService {
	mock := &MockRBACService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}