// Code generated by mockery v2.42.0. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"
)

// MockWeb3Service is an autogenerated mock type for the Web3Service type
type MockWeb3Service struct {
	mock.Mock
}

// VerifySignature provides a mock function with given fields: address, data, signatureData
func (_m *MockWeb3Service) VerifySignature(address string, data string, signatureData string) (bool, error) {
	ret := _m.Called(address, data, signatureData)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (bool, error)); ok {
		return rf(address, data, signatureData)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(address, data, signatureData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(address, data, signatureData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWeb3Service creates a new instance of MockWeb3Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeb3Service(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeb3Service {
	mock := &MockWeb3Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}