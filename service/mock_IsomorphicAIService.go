// Code generated by mockery v2.42.0. DO NOT EDIT.

package service

import (
	"context"
	"testing"

	"github.com/PromptPal/PromptPal/ent"
	"github.com/stretchr/testify/mock"
	openai "github.com/sashabaranov/go-openai"
)

// MockIsomorphicAIService is an autogenerated mock type for the IsomorphicAIService type
type MockIsomorphicAIService struct {
	mock.Mock
}

// Chat provides a mock function with given fields: ctx, provider, prompt, variables, userId
func (_m *MockIsomorphicAIService) Chat(ctx context.Context, provider *ent.Provider, prompt ent.Prompt, variables map[string]string, userId string) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(ctx, provider, prompt, variables, userId)

	var r0 openai.ChatCompletionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Provider, ent.Prompt, map[string]string, string) openai.ChatCompletionResponse); ok {
		r0 = rf(ctx, provider, prompt, variables, userId)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.Provider, ent.Prompt, map[string]string, string) error); ok {
		r1 = rf(ctx, provider, prompt, variables, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatStream provides a mock function with given fields: ctx, provider, prompt, variables, userId
func (_m *MockIsomorphicAIService) ChatStream(ctx context.Context, provider *ent.Provider, prompt ent.Prompt, variables map[string]string, userId string) (*ChatStreamResponse, error) {
	ret := _m.Called(ctx, provider, prompt, variables, userId)

	var r0 *ChatStreamResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Provider, ent.Prompt, map[string]string, string) *ChatStreamResponse); ok {
		r0 = rf(ctx, provider, prompt, variables, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChatStreamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.Provider, ent.Prompt, map[string]string, string) error); ok {
		r1 = rf(ctx, provider, prompt, variables, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields: ctx, prompt
func (_m *MockIsomorphicAIService) GetProvider(ctx context.Context, prompt ent.Prompt) (*ent.Provider, error) {
	ret := _m.Called(ctx, prompt)

	var r0 *ent.Provider
	if rf, ok := ret.Get(0).(func(context.Context, ent.Prompt) *ent.Provider); ok {
		r0 = rf(ctx, prompt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ent.Prompt) error); ok {
		r1 = rf(ctx, prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIsomorphicAIService creates a new instance of MockIsomorphicAIService. It also registers a testing interface on the mock and a cleanup function to assert the mock's expectations.
func NewMockIsomorphicAIService(t *testing.T) *MockIsomorphicAIService {
	mock := &MockIsomorphicAIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}